################################################################################
# IdC Sensor Data Infrastructure Docker Compose
################################################################################
################################################################################
version: "3.8"

services:
  mosquitto:
      image: eclipse-mosquitto:latest
      container_name: mosquitto
      ports:
          - 1883:1883
          - 8883:8883
          - 9001:9001
      volumes:
          - ./data/mosquitto-data/config:/mosquitto/config
          - ./data/mosquitto-data/data:/mosquitto/data
          - ./data/mosquitto-data/log:/mosquitto/log
          - ./data/mosquitto-data/certs:/mosquitto/certs
      networks:
          idc-net:
              ipv4_address: 172.100.10.10


  mqtt-subscriber:
    build: ./mqtt_subscriber  
    container_name: mqtt-subscriber
    environment:
      MQTT_BROKER: mosquitto  # Use the service name defined in docker-compose
      MQTT_PORT: 8883  # MQTT port
      MQTT_TOPIC: sensor/data
    depends_on:
      - mosquitto
    networks:
      idc-net:
        ipv4_address: 172.100.10.23  # Assign a unique IP address

  ml-training:
    build: ./ml_training  
    container_name: ml-training
    volumes:
      - ./data/model:/app/model
      - ./data/training:/app/data
    networks:
      idc-net:
        ipv4_address: 172.100.10.21  # Assign a unique IP address

  ml-inference:
    build: ./inference_engine  # or image: <ml-inference-image>
    container_name: ml-inference
    environment:
      DB_HOST: mysql
      DB_USER: dbuser
      DB_PASS: dbpass
      DB_NAME: idcsensordb
      DB_PORT: 3306
    volumes:
      - ./data/model:/app/models
    depends_on:
      - mysql
      - go-backend
    networks:
      idc-net:
        ipv4_address: 172.100.10.22  # Assign a unique IP address

  go-backend:
    build: ./backend_web
    container_name: go-backend
    ports:
      - "8080:8080"
    environment:
      DB_HOST: mysql
      DB_USER: dbuser
      DB_PASS: dbpass
      DB_NAME: idcsensordb
      DB_PORT: 3306
      PORT: 8080  # GoLang backend port to serve gin
    networks:
      idc-net:
        ipv4_address: 172.100.10.16
    volumes:
      - ./backend_web:/app
    depends_on:
      - mysql
    command: ["/wait-for-mysql.sh", "mysql", "./main"]

  react-frontend:
    build: ./frontend_web
    container_name: react-frontend
    ports:
      - "3000:3000"
    networks:
      idc-net:
        ipv4_address: 172.100.10.17
    depends_on:
      - go-backend
    restart: unless-stopped

  mysql:
      image: mysql
      # command: --default-authentication-plugin=mysql_native_password
      restart: always
      environment:
        MYSQL_ROOT_PASSWORD: root
        MYSQL_DATABASE: idcsensordb
        MYSQL_USER: dbuser
        MYSQL_PASSWORD: dbpass
      volumes:
        - ./mysql/var/lib/mysql:/var/lib/mysql
        - ./mysql/init_db/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
      networks:
        idc-net:
          ipv4_address: 172.100.10.18

  adminer:
      image: adminer
      restart: always
      ports:
        - 8081:8080
      networks:
        idc-net:
          ipv4_address: 172.100.10.19

  phpmyadmin:
      image: phpmyadmin/phpmyadmin
      depends_on:
        - mysql
      environment:
        PMA_HOST: mysql
        PMA_PORT: 3306
      ports:
        - "8082:80"
      networks:
          idc-net:
            ipv4_address: 172.100.10.20


networks:
  idc-net:
      driver: bridge
      ipam:
        driver: default
        config:
          - subnet: 172.100.10.0/24
